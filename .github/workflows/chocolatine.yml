name: Chocolatine Workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-MAT-200-COT-2-1-108trigo-shanya.oniloude.git"
  EXECUTABLES: "shay"
  BANNED_FUNCTIONS: "strlen" 

jobs:
  check_coding_style:
    name: Check Coding Style
    runs-on: ubuntu-latest
##   if: "!startsWith(github.ref_name, 'ga-ignore-') && github.repository != ${{ env.MIRROR_URL }}"
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Coding Style Checker
        run: check.sh $(pwd) $(pwd)

      - name: Display Errors
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line; do
              echo "::error file=${line%%:},line=${line##:}::Coding style issue"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    name: Check Compilation
    runs-on: ubuntu-latest
    needs: check_coding_style
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Compile Project
        run: |
          timeout 120 make || { echo "::error::Compilation failed"; exit 1; }

      - name: Clean Compilation
        run: make clean

      - name: Check Executables
        run: |
          for exec in $(echo "$EXECUTABLES" | tr ',' ' '); do
            if [ ! -x "$exec" ]; then
              echo "::error file=$exec::Executable not found or not executable"
              exit 1
            fi
          done

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check_program_compilation
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Tests
        run: timeout 120 make tests_run || { echo "::error::Tests failed"; exit 1; }

  check_banned_functions:
    runs-on: ubuntu-latest
    needs: check_coding_style
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan for banned functions
        run: |
          grep -rnE "\b(${{ env.BANNED_FUNCTIONS }})\b" --include=\*.c || true
          if grep -rnE "\b(${{ env.BANNED_FUNCTIONS }})\b" --include=\*.c; then
            echo "::error::Banned function usage detected"
            exit 1
          fi

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$GIT_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Push to mirror repository
        run: |
          git remote add mirror ${{ env.MIRROR_URL }}
          git push --mirror mirror